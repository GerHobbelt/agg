from conans import ConanFile, CMake, tools

class AggConan(ConanFile):
	name = "agg"
	version = "$(version)"
	license = "MIT"
	author = "Ivan Gagis <igagis@gmail.com>"
	url = "http://github.com/cppfw/" + name
	description = "Anti-grain geometry, vector graphics library in C++"
	topics = ("C++", "cross-platform")
	settings = "os", "compiler", "build_type", "arch"
	options = {"shared": [True, False], "fPIC": [True, False]}
	default_options = {"shared": False, "fPIC": True}
	generators = "make"
	scm = {"type": "git", "url": "auto", "revision": "auto"}

	def config_options(self):
		if self.settings.os == "Windows":
			del self.options.fPIC

	# we use the 'scm' attribute, so the source() method is not needed
#	def source(self):
#		self.run("git clone https://github.com/cppfw/" + self.name + ".git")
#		self.run("cd " + self.name + " && git checkout " + self.version)

		# This small hack might be useful to guarantee proper /MT /MD linkage
		# in MSVC if the packaged project doesn't have variables to set it
		# properly
# 		tools.replace_in_file("hello/CMakeLists.txt", "PROJECT(HelloWorld)",
# 							'''PROJECT(HelloWorld)
# include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
# conan_basic_setup()''')

	def build(self):
		self.run("CONANBUILDINFO_DIR=$(pwd)/ make")
		self.run("CONANBUILDINFO_DIR=$(pwd)/ make test")

	def package(self):
		self.copy("*.h", dst="include/agg", src="src/agg/include")
		self.copy("*.hpp", dst="include/agg", src="src/agg/include")
		self.copy("*" + self.name + ".lib", dst="lib", keep_path=False)
		self.copy("*.dll", dst="bin", src="src/build", keep_path=False)
		self.copy("*.so", dst="lib", src="src/build", keep_path=False)
		self.copy("*.so.*", dst="lib", src="src/build", keep_path=False)
		self.copy("*.dylib", dst="lib", src="src/build", keep_path=False)
		self.copy("*.a", dst="lib", src="src/build", keep_path=False)

	def package_info(self):
		self.cpp_info.libs = ["antigrain"]

	# change package id only when minor or major version changes, i.e. when ABI breaks
	def package_id(self):
		self.info.requires.minor_mode()
